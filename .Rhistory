load_all()
usethis::load_all()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
library(ggplot2)
library(ggskewboxplots)
# diamonds veri setinden: cut (kategorik) ve price (sayısal)
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
library(ggplot2)
library(ggskewboxplots)
# diamonds veri setinden: cut (kategorik) ve price (sayısal)
ggplot(diamonds, aes(y = price, group = cut)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
library(ggplot2)
library(ggskewboxplots)
# diamonds veri setinden: cut (kategorik) ve price (sayısal)
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
library(ggplot2)
library(ggskewboxplots)
# diamonds veri setinden: cut (kategorik) ve price (sayısal)
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
class(diamonds$cut)
library(ggplot2)
library(ggskewboxplots)
# diamonds veri setinden: cut (kategorik) ve price (sayısal)
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
ggplot(diamonds, aes(x = cut, y = price, group = 1)) +
geom_skewboxplot(method = "hubert") +
theme_minimal()
compute_group = function(data, scales, method = "tukey", k = 1.5) {
browser()  # ← ekleyin
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert")
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert")
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
diamonds$cut <- factor(diamonds$cut)
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
library(rlang)
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
library(ggskewboxplots)
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
library(ggdist)
library(ggdist)
library("ggdist")
install.packages("ggdist")
library(ggdist)
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_skewboxplot(method = "hubert") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price, group = cut)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
k <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
y <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
library(dplyr)
# Standart boxplot istatistiklerini elde et
standard_stats <- diamonds %>%
group_by(cut) %>%
summarise(
ymin = boxplot.stats(price)$stats[1],
lower = boxplot.stats(price)$stats[2],
middle = boxplot.stats(price)$stats[3],
upper = boxplot.stats(price)$stats[4],
ymax = boxplot.stats(price)$stats[5]
)
# compute_skew_stats fonksiyonunu çağıran fonksiyon
skew_stats <- diamonds %>%
group_by(cut) %>%
summarise(
stats = list(compute_skew_stats(price, method = "tukey")),
ymin = stats[[1]]$ymin,
lower = stats[[1]]$lower,
middle = stats[[1]]$middle,
upper = stats[[1]]$upper,
ymax = stats[[1]]$ymax
) %>% select(-stats)
# Sonuçları karşılaştır
comparison <- left_join(standard_stats, skew_stats, by = "cut", suffix = c("_std", "_skew"))
print(comparison)
View(comparison)
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey", outlier.shape = 19) + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey", outlier.shape = 19) + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey", outlier.shape = 19) + theme_bw()
compute_group = function(data, scales, method, k) {
stats <- compute_skew_stats(data$y, method = method, k = k)
# Ana boxplot istatistiklerini taşıyan satır
box_row <- data.frame(
x = data$x[1],
ymin = stats$ymin,
lower = stats$lower,
middle = stats$middle,
upper = stats$upper,
ymax = stats$ymax,
outlier = FALSE,
y = stats$middle  # kutu için medyan y değeri, gerekli olabilir
)
# Aykırı değerler
if (length(stats$outliers) > 0) {
outlier_rows <- data.frame(
x = rep(data$x[1], length(stats$outliers)),
y = stats$outliers,
outlier = TRUE
)
# Diğer sütunları boş ama tutarlı bırak
outlier_rows$ymin <- NA
outlier_rows$lower <- NA
outlier_rows$middle <- NA
outlier_rows$upper <- NA
outlier_rows$ymax <- NA
} else {
outlier_rows <- NULL
}
# Birleştir
combined <- rbind(box_row, outlier_rows)
return(combined)
}
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
#' Statistical Transformation for Skew Boxplots
#'
#' `StatSkewBoxplot` is a ggproto object that computes statistics necessary
#' to create skew boxplots, including quantiles, skewness measures, and whiskers.
#'
#' @format A ggproto object
#' @usage NULL
#' @keywords internal
#' @export
StatSkewBoxplot <- ggplot2::ggproto("StatSkewBoxplot", ggplot2::Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, method, k) {
stats <- compute_skew_stats(data$y, method = method, k = k)
data.frame(
x = data$x[1],
ymin = stats$ymin,
lower = stats$lower,
middle = stats$middle,
upper = stats$upper,
ymax = stats$ymax,
y = stats$middle
)
}
)
#' Skewness-Aware Boxplot (ggplot2 layer)
#'
#' Draws boxplots using alternative methods for skewness adjustment.
#'
#' @inheritParams ggplot2::geom_boxplot
#' @param stat The statistical transformation to use on the data for this layer. Defaults to "skewboxplot".
#' @param method Skew boxplot method (e.g. "tukey", "hubert", etc.)
#' @param k Tuning parameter (default = 1.5)
#' @export
geom_skewboxplot <- function(mapping = NULL, data = NULL,
stat = StatSkewBoxplot, position = "dodge",
..., method = "tukey", k = 1.5,
na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE) {
ggplot2::layer(
stat = stat,              # StatSkewBoxplot ggproto objesi doğrudan
geom = ggplot2::GeomBoxplot,
mapping = mapping,
data = data,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(method = method, k = k, na.rm = na.rm, ...)
)
}
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") + theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey", outlier.shape = 1, outlier.colour = "red") +
theme_bw()
#' Compute alternative boxplot statistics
#'
#' @param x A numeric vector
#' @param method Method name ("tukey", "kimber", "hubert", etc.)
#' @param k Tuning parameter (default 1.5)
#'
#' @return A list of boxplot stats: ymin, lower, middle, upper, ymax, outliers
#' @export
compute_skew_stats <- function(x, method = "tukey", k = 1.5) {
x <- stats::na.omit(x)
q1 <- stats::quantile(x, 0.25)
q2 <- stats::median(x)
q3 <- stats::quantile(x, 0.75)
iqr <- q3 - q1
mc <- {
above <- x[x > q2]
below <- x[x < q2]
if (length(above) == 0 || length(below) == 0) 0 else
(stats::median(above) - stats::median(below)) / iqr
}
sk <- {
n <- length(x)
m3 <- mean((x - mean(x))^3)
m2 <- mean((x - mean(x))^2)
s <- if (m2 == 0) 0 else m3 / (m2^(3/2))
max(min(s, 3.5), -3.5)
}
BC <- (q3 - q1 - 2 * q2) / iqr
switch(tolower(method),
tukey = {
lower <- q1 - k * iqr
upper <- q3 + k * iqr
},
kimber = {
lower <- q1 - 2 * k * (q2 - q1)
upper <- q3 + 2 * k * (q3 - q2)
},
hubert = {
factor <- exp(-3 * mc)
lower <- q1 - k * factor * iqr
upper <- q3 + k * factor * iqr
},
adil = {
factor <- exp(sk * abs(mc))
lower <- q1 - k * iqr * factor
upper <- q3 + k * iqr * factor
},
babura = {
factor <- exp(6 * BC)
lower <- q1 - k * factor * iqr
upper <- q3 + k * factor * iqr
},
walker = {
factor <- (1 - BC) / (1 + BC)
lower <- q1 - k * iqr * factor
upper <- q3 + k * iqr * factor
},
junsawang = {
ratio <- ifelse(q3 == q2, 0, (q2 - q1) / (q3 - q2))
factor <- exp(BC * ratio)
lower <- q1 - k * factor * iqr
upper <- q3 + k * factor * iqr
},
stop("Unknown method")
)
lower <- max(lower, min(x, na.rm = TRUE))
upper <- min(upper, max(x, na.rm = TRUE))
list(
ymin = if (any(x >= lower)) min(x[x >= lower], na.rm = TRUE) else min(x, na.rm = TRUE),
lower = q1,
middle = q2,
upper = q3,
ymax = if (any(x <= upper)) max(x[x <= upper], na.rm = TRUE) else max(x, na.rm = TRUE),
outliers = x[x < lower | x > upper]
)
}
compute_skew_stats(diamonds$price)
x <- c(1, 2, 2, 2, 3, 4, 100)  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:20]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:50]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:100]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:300]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:500]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "tukey")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
all.equal(
boxplot.stats(x)$out,
compute_skew_stats(x, method = "tukey")$outliers
)
x <- diamonds$price[1:500]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "adil")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
x <- diamonds$price[1:500]  # bariz outlier: 100
stats <- compute_skew_stats(x, method = "hubert")
stats$outliers
# Beklenen çıktı: 100
boxplot.stats(x)$out
# Aynı çıktıyı vermeli
devtools::document()
devtools::load_all()
rm(list = c("compute_skew_stats",
"geom_skewboxplot"))
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey", outlier.shape = 1, outlier.colour = "red") +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") +
theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") +
theme_bw()
#' Statistical Transformation for Skew Boxplots
#'
#' `StatSkewBoxplot` is a ggproto object that computes statistics necessary
#' to create skew boxplots, including quantiles, skewness measures, and whiskers.
#'
#' @format A ggproto object
#' @usage NULL
#' @keywords internal
#' @export
StatSkewBoxplot <- ggplot2::ggproto("StatSkewBoxplot", ggplot2::Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, method, k) {
stats <- compute_skew_stats(data$y, method = method, k = k)
data.frame(
x = data$x[1],
ymin = stats$ymin,
lower = stats$lower,
middle = stats$middle,
upper = stats$upper,
ymax = stats$ymax,
y = stats$middle
)
}
)
#' Skewness-Aware Boxplot (ggplot2 layer)
#'
#' Draws boxplots using alternative methods for skewness adjustment.
#'
#' @inheritParams ggplot2::geom_boxplot
#' @param stat The statistical transformation to use on the data for this layer. Defaults to "skewboxplot".
#' @param method Skew boxplot method (e.g. "tukey", "hubert", etc.)
#' @param k Tuning parameter (default = 1.5)
#' @export
geom_skewboxplot <- function(mapping = NULL, data = NULL,
stat = StatSkewBoxplot, position = "dodge",
..., method = "tukey", k = 1.5,
na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE) {
ggplot2::layer(
stat = stat,              # StatSkewBoxplot ggproto objesi doğrudan
geom = ggplot2::GeomBoxplot,
mapping = mapping,
data = data,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(method = method, k = k, na.rm = na.rm, ...)
)
}
devtools::document()
devtools::load_all()
rm(list = c("geom_skewboxplot"))
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") +
theme_bw()
devtools::document()
devtools::load_all()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "tukey") +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "hubert") +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "adil") +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang") +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", width = 1.5) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(width = 1.5) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(width = 1.5) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(width = 1.5) +stat_boxplot(geom ='errorbar', width = 0.6) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(width = 1.5) +stat_boxplot(geom ='errorbar', width = 0.6) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot() +stat_boxplot(geom ='errorbar', width = 0.6) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang") +stat_boxplot(geom ='errorbar', width = 0.6) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang") +stat_boxplot(geom ='errorbar', width = 0.6) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.shape = 16) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.size = 3) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", notch = FALSE) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", notch = TRUE) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.shape = 8) +
theme_bw()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.shape = 8) +
theme_bw() + coord_flip()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.colour = "red") +
theme_bw() + coord_flip()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.colour = "red") +stat_summary(fun.y=mean, geom="point", shape=23, size=4)+
theme_bw() + coord_flip()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.colour = "red") +stat_summary(fun=mean, geom="point", shape=23, size=4)+
theme_bw() + coord_flip()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_skewboxplot(method = "junsawang", outlier.colour = "red") +stat_summary(fun.y=mean, geom="point", shape=23, size=4)+
theme_bw() + coord_flip() + geom_jitter()
devtools::test()
devtools::document()
devtools::load_all()
devtools::test()
